{"version":3,"file":"static/js/726.be558484.chunk.js","mappings":"mNASA,MAAMA,EAAgB,CACpBC,iBAAkB,IAGdC,EAAYC,IAChB,MAAMC,EAAS,CAAC,EAMhB,OAJKD,EAAOF,mBACVG,EAAOH,iBAAmB,kCAGrBG,CAAM,EAEFC,EAAeA,KAC1B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,CAC3DG,UAAU,EACVC,QAAS,KAELC,GAAWC,EAAAA,EAAAA,MAiCjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,WAAY,aACZC,UAEFC,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAAO,SAAA,CACAd,EAAmBE,UAiDnBa,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAAO,SAAA,EACFR,EAAAA,EAAAA,KAAA,MAAAQ,SAAI,8BACJR,EAAAA,EAAAA,KAAA,KAAAQ,SAAG,sDACHR,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CACLC,QAAQ,YACRT,GAAI,CAAEU,UAAW,QACjBC,QAASA,IAAMf,EAAS,UAAUU,SACnC,6BAvDHR,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CACL7B,cAAeA,EACf8B,SA7COA,CAAC3B,EAAM4B,KAAqB,IAAnB,UAAEC,GAAWD,EACrCxB,GAAW,GAEX,MAAM0B,EAAO,CAAChC,iBAAiBE,EAAOF,iBAAkBiC,KAAKC,KAAKC,MAAMC,eAAeC,QAAQ,SAASC,kBAAkBF,eAAeC,QAAQ,sBACjJE,EAAAA,EACGC,KAAK,gDAAiDR,EAAM,CAC3D,eAAgB,qBAEjBS,MAAMC,IACDA,EAAIV,KAAKW,aACXC,YAAW,KACTnC,EAAsB,CAAEC,UAAU,EAAMC,QAAS,KACjDL,GAAW,GACXyB,GAAW,GACV,MAEHtB,EAAsB,CAAEC,UAAU,EAAOC,QAAS+B,EAAIV,KAAKrB,UAC3DiC,YAAW,KACTtC,GAAW,EAAM,GAChB,KACL,IAEDuC,OAAOC,IACNrC,EAAsB,CACpBC,UAAU,EACVC,QAAS,gDAEXL,GAAW,EAAM,GACjB,EAkBIL,SAAUA,EAASqB,SAElByB,IAAA,IAAC,OACA7C,EAAM,OACNC,EAAM,QACN6C,EAAO,aACPC,EAAY,WACZC,EAAU,aACVC,EAAY,cACZC,GACDL,EAAA,OACCxB,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAAA/B,SAAA,EACHR,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,CACRC,WAAS,EACTC,GAAG,mBACHC,MAAM,qBACNC,KAAK,mBACLC,MAAOzD,EAAOF,iBACd4D,SAAUX,EACVY,OAAQX,EACRY,SACEd,EAAQhD,mBAAoBG,EAAOH,kBAIrC+D,WACEf,EAAQhD,kBAAoBG,EAAOH,iBAC/BG,EAAOH,iBACP,MAGRc,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CACLwC,KAAK,SACLT,WAAS,EACT9B,QAAQ,YACRT,GAAI,CAAEiD,GAAI,GACVC,SAAU7D,EACV8D,UAAW9D,IAAWS,EAAAA,EAAAA,KAACsD,EAAAA,EAAgB,CAACC,KAAM,KAAO/C,SACtD,mBAGI,IAgBZd,EAAmBG,UAClBG,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAAAO,UACFR,EAAAA,EAAAA,KAAA,MAAAQ,SAAI,+BAIN,ECjIV,EAR0BgD,KAEtBxD,EAAAA,EAAAA,KAAAyD,EAAAA,SAAA,CAAAjD,UACER,EAAAA,EAAAA,KAACV,EAAY,K","sources":["components/verification.jsx","pages/verificationPage.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { Formik, Form } from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst initialValues = {\r\n  verificationCode: \"\",\r\n};\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.verificationCode) {\r\n    errors.verificationCode = \"Please enter verification Code\";\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const Verification = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [verificationStatus, setVerificationStatus] = useState({\r\n    verified: false,\r\n    message: \"\",\r\n  });\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    setLoading(true);\r\n  \r\n    const data = {verificationCode:values.verificationCode, user:JSON.parse(sessionStorage.getItem(\"user\")),verification_code:sessionStorage.getItem(\"verification_code\") }\r\n    axios\r\n      .post(\"https://booking-bus.onrender.com/verification\", data, {\r\n        \"content-type\": \"application/json\",\r\n      })\r\n      .then((res) => {\r\n        if (res.data.verification) {\r\n          setTimeout(() => {\r\n            setVerificationStatus({ verified: true, message: \"\" });\r\n            setLoading(false);\r\n            resetForm();\r\n          }, 1000);\r\n        } else {\r\n          setVerificationStatus({ verified: false, message: res.data.message });\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setVerificationStatus({\r\n          verified: false,\r\n          message: \"Error verifying the code. Please try again.\",\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        background: \"#ffffff70\",\r\n      }}\r\n    >\r\n      <Box>\r\n        {!verificationStatus.verified ? (\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validate={validate}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              isSubmitting,\r\n              setFieldValue,\r\n            }) => (\r\n              <Form>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"verificationCode\"\r\n                  label=\" verification Code\"\r\n                  name=\"verificationCode\"\r\n                  value={values.verificationCode}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={\r\n                    touched.verificationCode && errors.verificationCode\r\n                      ? true\r\n                      : false\r\n                  }\r\n                  helperText={\r\n                    touched.verificationCode && errors.verificationCode\r\n                      ? errors.verificationCode\r\n                      : \"\"\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{ my: 2 }}\r\n                  disabled={loading}\r\n                  startIcon={loading && <CircularProgress size={20} />}\r\n                >\r\n                  Verify Email\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        ) : (\r\n          <Box>\r\n            <h1>Verification successful!</h1>\r\n            <p>Congratulations! Your account has been verified.</p>\r\n            <Button\r\n              variant=\"contained\"\r\n              sx={{ marginTop: \"10px\" }}\r\n              onClick={() => navigate(\"/login\")}\r\n            >\r\n              Return to Login Page\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        {verificationStatus.message && (\r\n          <Box>\r\n            <h1>Verification failed!</h1>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Verification } from \"../components/verification\"; \r\n const VerificationPage = () => {\r\n  return (\r\n    <>\r\n      <Verification />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VerificationPage;"],"names":["initialValues","verificationCode","validate","values","errors","Verification","loading","setLoading","useState","verificationStatus","setVerificationStatus","verified","message","navigate","useNavigate","_jsx","Box","sx","display","justifyContent","alignItems","height","background","children","_jsxs","Button","variant","marginTop","onClick","Formik","onSubmit","_ref","resetForm","data","user","JSON","parse","sessionStorage","getItem","verification_code","axios","post","then","res","verification","setTimeout","catch","err","_ref2","touched","handleChange","handleBlur","isSubmitting","setFieldValue","Form","TextField","fullWidth","id","label","name","value","onChange","onBlur","error","helperText","type","my","disabled","startIcon","CircularProgress","size","VerificationPage","_Fragment"],"sourceRoot":""}