{"version":3,"file":"static/js/959.18a8432d.chunk.js","mappings":"mNASA,MAAMA,EAAgB,CACpBC,iBAAkB,IAGdC,EAAYC,IAChB,MAAMC,EAAS,CAAC,EAMhB,OAJKD,EAAOF,mBACVG,EAAOH,iBAAmB,kCAGrBG,CAAM,EAEFC,EAAe,KAC1B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,CAC3DG,UAAU,EACVC,QAAS,KAELC,GAAWC,EAAAA,EAAAA,MAkCjB,OACE,SAACC,EAAA,EAAG,CACFC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,QACRC,WAAY,aACZ,UAEF,UAACN,EAAA,EAAG,WACAN,EAAmBE,UAiDnB,UAACI,EAAA,EAAG,YACF,wBAAI,8BACJ,uBAAG,sDACH,SAACO,EAAA,EAAM,CACLC,QAAQ,YACRP,GAAI,CAAEQ,UAAW,QACjBC,QAAS,IAAMZ,EAAS,UAAU,SACnC,6BAvDH,SAAC,KAAM,CACLb,cAAeA,EACf0B,SA9CO,CAACvB,EAAO,KAAoB,IAAnB,UAAEwB,GAAW,EACrCpB,GAAW,GAEX,MAAMqB,EAAO,CAAC3B,iBAAiBE,EAAOF,iBAAkB4B,KAAKC,KAAKC,MAAMC,eAAeC,QAAQ,SAASC,kBAAkBF,eAAeC,QAAQ,sBACjJE,EAAAA,EAAAA,KACQ,gDAAiDP,EAAM,CAC3D,eAAgB,qBAEjBQ,MAAMC,IACDA,EAAIT,KAAKU,aACXC,YAAW,KACT7B,EAAsB,CAAEC,UAAU,EAAMC,QAAS,KACjDL,GAAW,GACXoB,GAAW,GACV,MAEHjB,EAAsB,CAAEC,UAAU,EAAOC,QAASyB,EAAIT,KAAKhB,UAC3D2B,YAAW,KACThC,GAAW,EAAM,GAChB,KACL,IAEDiC,OAAOC,IACNC,QAAQC,IAAIF,GACZ/B,EAAsB,CACpBC,UAAU,EACVC,QAAS,gDAEXL,GAAW,EAAM,GACjB,EAkBIL,SAAUA,EAAS,SAElB,QAAC,OACAC,EAAM,OACNC,EAAM,QACNwC,EAAO,aACPC,EAAY,WACZC,EAAU,aACVC,EAAY,cACZC,GACD,SACC,UAAC,KAAI,YACH,SAACC,EAAA,EAAS,CACRC,WAAS,EACTC,GAAG,mBACHC,MAAM,qBACNC,KAAK,mBACLC,MAAOnD,EAAOF,iBACdsD,SAAUV,EACVW,OAAQV,EACRW,SACEb,EAAQ3C,mBAAoBG,EAAOH,kBAIrCyD,WACEd,EAAQ3C,kBAAoBG,EAAOH,iBAC/BG,EAAOH,iBACP,MAGR,SAACqB,EAAA,EAAM,CACLqC,KAAK,SACLT,WAAS,EACT3B,QAAQ,YACRP,GAAI,CAAE4C,GAAI,GACVC,SAAUvD,EACVwD,UAAWxD,IAAW,SAACyD,EAAA,EAAgB,CAACC,KAAM,KAAO,SACtD,mBAGI,IAgBZvD,EAAmBG,UAClB,SAACG,EAAA,EAAG,WACF,wBAAI,+BAIN,EClIV,EAR0B,KAEtB,+BACE,SAACV,EAAY,K","sources":["components/verification.jsx","pages/verificationPage.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { Formik, Form } from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst initialValues = {\r\n  verificationCode: \"\",\r\n};\r\n\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!values.verificationCode) {\r\n    errors.verificationCode = \"Please enter verification Code\";\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const Verification = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [verificationStatus, setVerificationStatus] = useState({\r\n    verified: false,\r\n    message: \"\",\r\n  });\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    setLoading(true);\r\n  \r\n    const data = {verificationCode:values.verificationCode, user:JSON.parse(sessionStorage.getItem(\"user\")),verification_code:sessionStorage.getItem(\"verification_code\") }\r\n    axios\r\n      .post(\"https://booking-bus.onrender.com/verification\", data, {\r\n        \"content-type\": \"application/json\",\r\n      })\r\n      .then((res) => {\r\n        if (res.data.verification) {\r\n          setTimeout(() => {\r\n            setVerificationStatus({ verified: true, message: \"\" });\r\n            setLoading(false);\r\n            resetForm();\r\n          }, 1000);\r\n        } else {\r\n          setVerificationStatus({ verified: false, message: res.data.message });\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setVerificationStatus({\r\n          verified: false,\r\n          message: \"Error verifying the code. Please try again.\",\r\n        });\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        background: \"#ffffff70\",\r\n      }}\r\n    >\r\n      <Box>\r\n        {!verificationStatus.verified ? (\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validate={validate}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              isSubmitting,\r\n              setFieldValue,\r\n            }) => (\r\n              <Form>\r\n                <TextField\r\n                  fullWidth\r\n                  id=\"verificationCode\"\r\n                  label=\" verification Code\"\r\n                  name=\"verificationCode\"\r\n                  value={values.verificationCode}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  error={\r\n                    touched.verificationCode && errors.verificationCode\r\n                      ? true\r\n                      : false\r\n                  }\r\n                  helperText={\r\n                    touched.verificationCode && errors.verificationCode\r\n                      ? errors.verificationCode\r\n                      : \"\"\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{ my: 2 }}\r\n                  disabled={loading}\r\n                  startIcon={loading && <CircularProgress size={20} />}\r\n                >\r\n                  Verify Email\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        ) : (\r\n          <Box>\r\n            <h1>Verification successful!</h1>\r\n            <p>Congratulations! Your account has been verified.</p>\r\n            <Button\r\n              variant=\"contained\"\r\n              sx={{ marginTop: \"10px\" }}\r\n              onClick={() => navigate(\"/login\")}\r\n            >\r\n              Return to Login Page\r\n            </Button>\r\n          </Box>\r\n        )}\r\n        {verificationStatus.message && (\r\n          <Box>\r\n            <h1>Verification failed!</h1>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Verification } from \"../components/verification\"; \r\n const VerificationPage = () => {\r\n  return (\r\n    <>\r\n      <Verification />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VerificationPage;"],"names":["initialValues","verificationCode","validate","values","errors","Verification","loading","setLoading","useState","verificationStatus","setVerificationStatus","verified","message","navigate","useNavigate","Box","sx","display","justifyContent","alignItems","height","background","Button","variant","marginTop","onClick","onSubmit","resetForm","data","user","JSON","parse","sessionStorage","getItem","verification_code","axios","then","res","verification","setTimeout","catch","err","console","log","touched","handleChange","handleBlur","isSubmitting","setFieldValue","TextField","fullWidth","id","label","name","value","onChange","onBlur","error","helperText","type","my","disabled","startIcon","CircularProgress","size"],"sourceRoot":""}